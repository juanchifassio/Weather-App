{"version":3,"sources":["components/Card/Units.js","components/Card/Temperature.js","components/Card/Conditions.js","components/Card/Date.js","components/Card/TitleCity.js","components/Card/Card.js","components/Card/NowCard.js","components/CardsCarousel.js","components/NavBar/SearchParams.js","components/NavBar/SearchCity.js","components/NavBar/NavBar.js","components/Footer/Social.js","components/Footer/Footer.js","App.js","index.js"],"names":["Units","unit","getUnits","Temperature","weather","useContext","Unit","size","main","temp","temp_max","temp_min","templateColumns","fontSize","Conditions","textAlign","ml","my","mt","humidity","mr","wind","speed","pressure","clouds","all","FormatDate","props","undefined","hour","timezone","unix_timestamp","date","Date","formattedTime","getHours","getMinutes","substr","dayArray","split","constructor","day","moment","format","today","getFullYear","getMonth","getDate","TodayDate","TitleCity","city","Context","includes","titleCity","WeatherCard","forecast","country","mb","maxW","w","h","bg","useColorModeValue","boxShadow","rounded","p","overflow","color","fontFamily","dt_txt","px","sm","md","lg","xl","src","icon","borderRadius","boxSize","minWidth","description","dt","NowCard","id","name","sys","alt","CardsCarousel","weathers","days","Day","Country","Timezone","showThumbs","showStatus","autoFocus","useKeyboardArrows","list","ArrFilter","parseInt","slice","map","item","filter","element","this","base","SearchParams","fetchData","daysOptions","label","value","unitsOptions","onChange","e","target","SearchCity","fetchCity","placeholder","onKeyPress","event","key","Navbar","useColorMode","colorMode","toggleColorMode","CityData","cityData","minH","alignItems","justifyContent","display","href","style","textDecoration","Object","keys","data","Data","onClick","SocialMedia","variant","as","aria-label","isRound","Footer","Social","createContext","require","config","App","useState","setWeather","setUnit","setDays","cityName","setCityName","GETrequestForecast","process","GETrequestWeather","setCoor","pos","coords","axios","get","latitude","longitude","then","res","useEffect","navigator","geolocation","getCurrentPosition","console","log","firstUpdate","useRef","useLayoutEffect","current","isNaN","String","flexDirection","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1b779759.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Units = ({ unit }) => {\r\n  const getUnits = (unit) => {\r\n    if (unit === \"metric\") {\r\n      return \"°C\";\r\n    } else if (unit === \"standard\") {\r\n      return \"K\";\r\n    } else {\r\n      return \"°F\";\r\n    }\r\n  };\r\n\r\n  return <>{getUnits(unit)}</>;\r\n};\r\n\r\nexport default Units;\r\n","import React, { useContext } from \"react\";\r\nimport { Unit } from \"../../App\";\r\nimport Units from \"./Units\";\r\nimport { Heading, Text, Stack, Grid, GridItem } from \"@chakra-ui/react\";\r\n\r\nconst Temperature = ({ weather }) => {\r\n  const unit = useContext(Unit);\r\n  return (\r\n    <>\r\n      <Heading size=\"md\">Temperature</Heading>\r\n      <Heading size=\"lg\">\r\n        {weather.main.temp} <Units unit={unit} />\r\n      </Heading>\r\n      {weather.main.temp_max !== weather.main.temp_min ? (\r\n        <Grid templateColumns=\"repeat(2, 1fr)\">\r\n          <GridItem>\r\n            <Stack>\r\n              <Text fontSize=\"lg\">Low</Text>\r\n              <Text fontSize=\"xl\">\r\n                {weather.main.temp_min} <Units unit={unit} />\r\n              </Text>\r\n            </Stack>\r\n          </GridItem>\r\n          <GridItem>\r\n            <Stack>\r\n              <Text fontSize=\"lg\">High</Text>\r\n              <Text fontSize=\"xl\">\r\n                {weather.main.temp_max} <Units unit={unit} />\r\n              </Text>\r\n            </Stack>\r\n          </GridItem>\r\n        </Grid>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Temperature;\r\n","import React from \"react\";\r\nimport { Box, Text, Stack, Grid } from \"@chakra-ui/react\";\r\n\r\nconst Conditions = ({ weather }) => {\r\n  return (\r\n    <Grid templateColumns=\"repeat(2, 1fr)\">\r\n      <Box textAlign=\"left\" ml={10} my={4} mt={5}>\r\n        <Stack>\r\n          <Text fontSize=\"lg\">Humidity</Text>\r\n          <Text fontSize=\"xl\">{weather.main.humidity} %</Text>\r\n        </Stack>\r\n      </Box>\r\n      <Box textAlign=\"right\" mr={10} my={4} mt={5}>\r\n        <Stack>\r\n          <Text fontSize=\"lg\">Wind</Text>\r\n          <Text fontSize=\"xl\">{weather.wind.speed} %</Text>\r\n        </Stack>\r\n      </Box>\r\n      <Box textAlign=\"left\" ml={10}>\r\n        <Stack>\r\n          <Text fontSize=\"lg\">Pressure</Text>\r\n          <Text fontSize=\"xl\">{weather.main.pressure} hPa</Text>\r\n        </Stack>\r\n      </Box>\r\n      <Box textAlign=\"right\" mr={10}>\r\n        <Stack>\r\n          <Text fontSize=\"lg\">Cloudiness</Text>\r\n          <Text fontSize=\"xl\">{weather.clouds.all} % </Text>\r\n        </Stack>\r\n      </Box>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Conditions;\r\n","import moment from \"moment\";\r\nimport React from \"react\";\r\n\r\nconst FormatDate = (props) => {\r\n  if (props.hour !== undefined) {\r\n    var timezone = props.timezone !== undefined ? props.timezone : 0;\r\n    let unix_timestamp = props.hour + timezone + 10800;\r\n\r\n    // multiplied by 1000 so that the argument is in milliseconds, not seconds.\r\n    var date = new Date(unix_timestamp * 1000);\r\n    // Hours part from the timestamp\r\n    var hours = date.getHours();\r\n    // Minutes part from the timestamp\r\n    var minutes = \"0\" + date.getMinutes();\r\n\r\n    var formattedTime = hours + \":\" + minutes.substr(-2);\r\n  }\r\n\r\n  if (props.date !== undefined) {\r\n    var Day = props.date.split(\" \")[0];\r\n    var dayArray = Day.split(\"-\");\r\n\r\n    var constructor = new Date(dayArray[0], dayArray[1] - 1, dayArray[2]);\r\n    var day = moment(constructor).format(\"MMMM D Y\");\r\n  }\r\n\r\n  const TodayDate = () => {\r\n    var today = new Date();\r\n\r\n    var Today =\r\n      today.getFullYear() +\r\n      \"-\" +\r\n      (today.getMonth() + 1) +\r\n      \"-\" +\r\n      today.getDate();\r\n    var dayArray = Today.split(\"-\");\r\n\r\n    var constructor = new Date(dayArray[0], dayArray[1] - 1, dayArray[2]);\r\n    var Today1 = moment(constructor).format(\"MMMM D Y\");\r\n    return Today1;\r\n  };\r\n  return (\r\n    <>\r\n      {day !== undefined ? day : TodayDate()} {formattedTime}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FormatDate;\r\n","import React, { useContext } from \"react\";\r\nimport { Context } from \"../../App\";\r\n\r\nconst TitleCity = () => {\r\n  const city = useContext(Context);\r\n\r\n  if (city.includes(\",\") === true) {\r\n    var titleCity = city.split(\",\");\r\n    return <>{titleCity[0]}</>;\r\n  } else {\r\n    return <>{city}</>;\r\n  }\r\n};\r\n\r\nexport default TitleCity;\r\n","import React from \"react\";\r\nimport {\r\n  Box,\r\n  Center,\r\n  Heading,\r\n  Text,\r\n  Stack,\r\n  useColorModeValue,\r\n} from \"@chakra-ui/react\";\r\nimport { Image } from \"@chakra-ui/react\";\r\nimport Temperature from \"./Temperature\";\r\nimport Conditions from \"./Conditions\";\r\nimport FormatDate from \"./Date\";\r\nimport TitleCity from \"./TitleCity\";\r\n\r\nconst WeatherCard = (props) => {\r\n  const forecast = props.forecast;\r\n  const country = props.country;\r\n\r\n  return (\r\n    <Center key={forecast.dt} mt={5} mb={10}>\r\n      <Box\r\n        maxW={\"600px\"}\r\n        w={\"full\"}\r\n        h={700}\r\n        bg={useColorModeValue(\"white\", \"gray.900\")}\r\n        boxShadow={\"dark-lg\"}\r\n        rounded={\"2xl\"}\r\n        p={6}\r\n        mt={10}\r\n        overflow={\"hidden\"}\r\n      >\r\n        <Stack>\r\n          <Heading\r\n            color={useColorModeValue(\"gray.700\", \"white\")}\r\n            fontSize={\"4xl\"}\r\n            fontFamily={\"body\"}\r\n          >\r\n            <TitleCity />, {country}\r\n          </Heading>\r\n          <Text color={\"gray.500\"}>\r\n            <FormatDate date={forecast.dt_txt} />\r\n          </Text>\r\n          <Center px={{ sm: \"0\", md: \"180\", lg: \"180\", xl: \"180\" }}>\r\n            <Image\r\n              src={`http://openweathermap.org/img/wn/${forecast.weather[0].icon}@4x.png`}\r\n              borderRadius=\"full\"\r\n              boxSize=\"180px\"\r\n              minWidth={180}\r\n              maxW={180}\r\n            />\r\n          </Center>\r\n        </Stack>\r\n        <Stack>\r\n          <Text>{forecast.weather[0].main} </Text>\r\n          <Text>({forecast.weather[0].description})</Text>\r\n          <Temperature weather={forecast} />\r\n          <Conditions weather={forecast} />\r\n        </Stack>\r\n      </Box>\r\n    </Center>\r\n  );\r\n};\r\n\r\nexport default WeatherCard;\r\n","import React from \"react\";\r\nimport {\r\n  Box,\r\n  Center,\r\n  Heading,\r\n  Text,\r\n  Stack,\r\n  useColorModeValue,\r\n} from \"@chakra-ui/react\";\r\nimport { Image } from \"@chakra-ui/react\";\r\nimport Temperature from \"./Temperature\";\r\nimport Conditions from \"./Conditions\";\r\nimport FormatDate from \"./Date\";\r\n\r\nconst NowCard = ({ weather }) => {\r\n  return (\r\n    <Center id={weather.dt} mt={5} mb={10}>\r\n      <Box\r\n        maxW={\"600px\"}\r\n        w={\"full\"}\r\n        h={700}\r\n        bg={useColorModeValue(\"white\", \"gray.900\")}\r\n        boxShadow={\"dark-lg\"}\r\n        rounded={\"2xl\"}\r\n        p={6}\r\n        mt={10}\r\n        overflow={\"hidden\"}\r\n      >\r\n        <Stack>\r\n          <Heading\r\n            color={useColorModeValue(\"gray.700\", \"white\")}\r\n            fontSize={\"4xl\"}\r\n            fontFamily={\"body\"}\r\n          >\r\n            {weather.name}, {weather.sys.country}\r\n          </Heading>\r\n          <Text color={\"gray.500\"}>\r\n            <FormatDate hour={weather.dt} timezone={weather.timezone} />\r\n          </Text>\r\n          <Center px={{ sm: \"0\", md: \"180\", lg: \"180\", xl: \"180\" }}>\r\n            <Image\r\n              src={`http://openweathermap.org/img/wn/${weather.weather[0].icon}@4x.png`}\r\n              alt={weather.weather[0].icon}\r\n              borderRadius=\"full\"\r\n              boxSize=\"180px\"\r\n              minWidth={180}\r\n              maxW={180}\r\n            />\r\n          </Center>\r\n        </Stack>\r\n        <Stack>\r\n          <Text>{weather.weather[0].main} </Text>\r\n          <Text>({weather.weather[0].description})</Text>\r\n          <Temperature weather={weather} />\r\n          <Conditions weather={weather} />\r\n        </Stack>\r\n      </Box>\r\n    </Center>\r\n  );\r\n};\r\n\r\nexport default NowCard;\r\n","import React, { useContext } from \"react\";\r\nimport { Carousel } from \"react-responsive-carousel\";\r\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\";\r\nimport { Day } from \"../App\";\r\nimport WeatherCard from \"./Card/Card\";\r\nimport NowCard from \"./Card/NowCard\";\r\n\r\nconst CardsCarousel = ({ weathers }) => {\r\n  const days = useContext(Day);\r\n\r\n  const Country = weathers.city !== undefined ? weathers.city.country : null;\r\n  const Timezone = weathers.city !== undefined ? weathers.city.timezone : null;\r\n\r\n  const ArrFilter = [0, 8, 16, 24, 32];\r\n\r\n  const filter = (ArrFilter, weathers, days) => {\r\n    if (weathers.list[parseInt(days) - 1] !== undefined) {\r\n      var Arr = ArrFilter.slice(0, parseInt(days) / 8);\r\n      var newArr = Arr.map((item) => weathers.list[item]);\r\n      return newArr;\r\n    } else {\r\n      return weathers.list;\r\n    }\r\n  };\r\n\r\n  function callback(element) {\r\n    return (\r\n      <WeatherCard\r\n        forecast={element}\r\n        country={this.country}\r\n        timezone={this.timezone}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Carousel\r\n      showThumbs={false}\r\n      showStatus={false}\r\n      autoFocus={true}\r\n      useKeyboardArrows={true}\r\n    >\r\n      {weathers.list !== undefined ? (\r\n        filter(ArrFilter, weathers, days).map(callback, {\r\n          country: Country,\r\n          timezone: Timezone,\r\n        })\r\n      ) : weathers.base !== undefined ? (\r\n        <NowCard weather={weathers} />\r\n      ) : null}\r\n    </Carousel>\r\n  );\r\n};\r\n\r\nexport default CardsCarousel;\r\n","import { Select } from \"@chakra-ui/select\";\r\nimport React from \"react\";\r\n\r\nconst SearchParams = ({ fetchData }) => {\r\n  const days = [\r\n    { label: \"Now\", value: \"1\" },\r\n    { label: \"1 Day\", value: \"8\" },\r\n    { label: \"2 Days\", value: \"16\" },\r\n    { label: \"3 Days\", value: \"24\" },\r\n    { label: \"4 Days\", value: \"32\" },\r\n    { label: \"5 Days\", value: \"40\" },\r\n  ];\r\n  const units = [\r\n    { label: \"Metric\", value: \"metric\" },\r\n    { label: \"Standard\", value: \"standard\" },\r\n    { label: \"Imperial\", value: \"imperial\" },\r\n  ];\r\n\r\n  const daysOptions = days.map((day) => {\r\n    return (\r\n      <option value={day.value} key={day.value}>\r\n        {day.label}\r\n      </option>\r\n    );\r\n  });\r\n\r\n  const unitsOptions = units.map((unit) => {\r\n    return (\r\n      <option value={unit.value} key={unit.value}>\r\n        {unit.label}\r\n      </option>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <Select\r\n        mr={3}\r\n        onChange={(e) => {\r\n          fetchData(e.target.value);\r\n        }}\r\n      >\r\n        {daysOptions}\r\n      </Select>\r\n      <Select\r\n        mr={3}\r\n        onChange={(e) => {\r\n          fetchData(e.target.value);\r\n        }}\r\n      >\r\n        {unitsOptions}\r\n      </Select>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchParams;\r\n","import { Input } from \"@chakra-ui/input\";\r\nimport React from \"react\";\r\n\r\nconst SearchCity = ({ fetchCity }) => {\r\n  const handleInputChange = (event) => {\r\n    if (event.key === \"Enter\") {\r\n      fetchCity(event.target.value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Input\r\n        placeholder=\"Search for a City . . .\"\r\n        mr={3}\r\n        onKeyPress={handleInputChange}\r\n      ></Input>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchCity;\r\n","import React from \"react\";\r\nimport {\r\n  Box,\r\n  Heading,\r\n  Flex,\r\n  Button,\r\n  useColorModeValue,\r\n  useColorMode,\r\n  Link,\r\n} from \"@chakra-ui/react\";\r\nimport { FaMoon, FaSun } from \"react-icons/fa\";\r\nimport SearchParams from \"./SearchParams\";\r\nimport SearchCity from \"./SearchCity\";\r\n\r\nconst Navbar = (props) => {\r\n  const { colorMode, toggleColorMode } = useColorMode();\r\n\r\n  const CityData = props.cityData;\r\n\r\n  const fetchData = (data) => {\r\n    props.Data(data);\r\n  };\r\n\r\n  const fetchCity = (city) => {\r\n    CityData[Object.keys(CityData)[0]](city);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        bg={useColorModeValue(\"gray.100\", \"gray.900\")}\r\n        px={4}\r\n        w=\"100%\"\r\n        minH=\"7vh\"\r\n      >\r\n        <Flex h={16} alignItems={\"center\"} justifyContent={\"space-between\"}>\r\n          <Heading size=\"md\" display={{ base: \"none\", md: \"block\" }}>\r\n            <Link href=\"/\" style={{ textDecoration: \"none\" }}>\r\n              Weather App\r\n            </Link>\r\n          </Heading>\r\n          <Flex>\r\n            <SearchCity fetchCity={fetchCity} />\r\n            <SearchParams fetchData={fetchData} />\r\n            <Button onClick={toggleColorMode}>\r\n              {colorMode === \"light\" ? (\r\n                <FaMoon size={70} />\r\n              ) : (\r\n                <FaSun size={70} />\r\n              )}\r\n            </Button>\r\n          </Flex>\r\n        </Flex>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n\r\n//{{ md: 0, lg: 100, xl: 300 }}\r\n","import React from \"react\";\r\nimport { FaGithub, FaLinkedinIn } from \"react-icons/fa\";\r\nimport { ButtonGroup, IconButton } from \"@chakra-ui/react\";\r\n\r\nconst SocialMedia = (props) => {\r\n  return (\r\n    <ButtonGroup variant=\"ghost\" color=\"gray.600\" {...props}>\r\n      <IconButton\r\n        as=\"a\"\r\n        href=\"https://github.com/juanchifassio\"\r\n        aria-label=\"Instagram\"\r\n        isRound=\"true\"\r\n        target=\"_blank\"\r\n        icon={<FaGithub fontSize=\"20px\" />}\r\n      />\r\n      <IconButton\r\n        as=\"a\"\r\n        href=\"https://www.linkedin.com/in/juan-martin-fassio-b012b0154/\"\r\n        aria-label=\"Linkedin\"\r\n        isRound=\"true\"\r\n        target=\"_blank\"\r\n        icon={<FaLinkedinIn fontSize=\"20px\" />}\r\n      />\r\n    </ButtonGroup>\r\n  );\r\n};\r\n\r\nexport default SocialMedia;\r\n","import { Center, useColorModeValue, Heading, Box } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport SocialMedia from \"./Social\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <Box>\r\n      <Center\r\n        as={\"footer\"}\r\n        h=\"10vh\"\r\n        bg={useColorModeValue(\"gray.100\", \"gray.900\")}\r\n        justifyContent={\"space-between\"}\r\n        px={10}\r\n      >\r\n        <Heading size=\"md\">By Juan Martin Fassio</Heading>\r\n        <SocialMedia />\r\n      </Center>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import {\r\n  useState,\r\n  useEffect,\r\n  useRef,\r\n  useLayoutEffect,\r\n  createContext,\r\n} from \"react\";\r\nimport { Box, useColorModeValue } from \"@chakra-ui/react\";\r\nimport CardsCarousel from \"./components/CardsCarousel\";\r\nimport Navbar from \"./components/NavBar/NavBar\";\r\nimport Footer from \"./components/Footer/Footer\";\r\nimport axios from \"axios\";\r\n\r\nexport const Context = createContext(\"\");\r\nexport const Unit = createContext(\"\");\r\nexport const Day = createContext(\"\");\r\n\r\nrequire(\"dotenv\").config();\r\n\r\nfunction App() {\r\n  const [weathers, setWeather] = useState([]);\r\n  const [unit, setUnit] = useState(\"metric\");\r\n  const [days, setDays] = useState(\"1\");\r\n  const [cityName, setCityName] = useState(\"\");\r\n\r\n  const GETrequestForecast = `//api.openweathermap.org/data/2.5/forecast?q=${cityName}&cnt=${days}&units=${unit}&appid=${process.env.REACT_APP_APIkey}`;\r\n  const GETrequestWeather = `//api.openweathermap.org/data/2.5/weather?q=${cityName}&units=${unit}&appid=${process.env.REACT_APP_APIkey}`;\r\n\r\n  const Data = (data) => {\r\n    isNaN(data) === true ? setUnit(data) : setDays(String(data));\r\n  };\r\n\r\n  var cityData = (city) => {\r\n    setCityName(city);\r\n  };\r\n\r\n  const setCoor = (pos) => {\r\n    var coords = pos.coords;\r\n    axios\r\n      .get(\r\n        `//api.openweathermap.org/data/2.5/weather?lat=${coords.latitude}&lon=${coords.longitude}&appid=${process.env.REACT_APP_APIkey}&units=${unit}`\r\n      )\r\n      .then((res) => {\r\n        setWeather(res.data);\r\n      });\r\n  };\r\n\r\n  // this one renders only on first render (getting the user's current location's weather)\r\n\r\n  useEffect(() => {\r\n    if (!navigator.geolocation) {\r\n      console.log(\"Geolocation not supported\");\r\n    } else {\r\n      navigator.geolocation.getCurrentPosition(setCoor); //on success calls setCoors function\r\n    }\r\n  }, []);\r\n\r\n  // make this guys (axios get requests) skip first render\r\n\r\n  const firstUpdate = useRef(true);\r\n  useLayoutEffect(() => {\r\n    if (firstUpdate.current) {\r\n      firstUpdate.current = false;\r\n    } else {\r\n      if (days === \"1\") {\r\n        axios.get(GETrequestWeather).then((res) => {\r\n          setWeather(res.data);\r\n        });\r\n      }\r\n\r\n      if (days > parseInt(\"1\")) {\r\n        axios.get(GETrequestForecast).then((res) => {\r\n          setWeather(res.data);\r\n        });\r\n      }\r\n    }\r\n  }, [cityName, unit, days]);\r\n\r\n  return (\r\n    <Box>\r\n      <Navbar Data={Data} cityData={{ cityData }} />\r\n      <Box\r\n        bg={useColorModeValue(\"white\", \"gray.700\")}\r\n        minH=\"83vh\"\r\n        display={\"flex\"}\r\n        flexDirection={\"column\"}\r\n      >\r\n        <Context.Provider value={cityName}>\r\n          <Unit.Provider value={unit}>\r\n            <Day.Provider value={days}>\r\n              {cityName !== undefined ? (\r\n                <CardsCarousel weathers={weathers} />\r\n              ) : null}\r\n            </Day.Provider>\r\n          </Unit.Provider>\r\n        </Context.Provider>\r\n      </Box>\r\n      <Footer />\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ChakraProvider>\r\n      <App />\r\n    </ChakraProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}